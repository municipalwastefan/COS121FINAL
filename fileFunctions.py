from helpIndex import *

'''
Initiate
Runs automatically after file name is entered and confirmed to exist.
First, it opens the file, and saves its contents to fileContents.
Next, it splits fileContents into a list by each new line. This list is 
saved to fileLines, where the legend is removed and any potential white space
at the end is removed as well. The lists are then sent to createPerson(), and a dictionary
for each line of data is created and added to a list of dictionaries representing the data.
'''

def initiate(file):
   try:
      file = open(file,"r")
      fileContents = file.read()
      fileLines = fileContents.split("\n")
      fieldLine = fileLines[0]
      getFieldNames(fieldLine)
      fileLines.pop(0)
      while '' in fileLines:
         fileLines.remove('')
      file.close()
      allPpl = []
      for line in fileLines:
         sLine = line.split(",")
         onePerson = createPerson(sLine)
         allPpl.append(onePerson)

      printContents = input("Would you like the print the contents of the file? (Y/N)\n:")
      printContents = printContents.strip().lower()
      if printContents == "y":
         print(allPpl)
      else:
         print()
      print("File initiated and ready for processing!")
      return allPpl
   except:
      print("Unknown file!")


def getFieldNames(fieldLine):
   fieldLine = fieldLine.split(",")
   fieldNames = [fieldLine[0], fieldLine[1], fieldLine[2], fieldLine[3], fieldLine[4], fieldLine[5]] # stores field names for further reference of program
   return fieldNames

'''
createPerson
This function is called by the initiate function. It takes the lists of csv data generated by initiate() and turns it into
individual dictionaries for each line of data.
'''

def createPerson(sLine):
   onePerson = {
    "id":sLine[0],
    "first_name":sLine[1],
    "last_name":sLine[2],
    "email":sLine[3],
    "gender":sLine[4],
    "ip_address":sLine[5],
   }
   return onePerson

'''
dataSearch
Runs when the search command is entered and an ID is specified.
'''
def dataSearch(field, searchChoice, updatedPpl):
   data = 0

   for person in updatedPpl:
      if person[field] == searchChoice:
         data = person
         print(data)
         break
      else:
         continue
   if data == 0:
      print(f"No data found for {field} {BLUE}{searchChoice}{RESET}.")
   
'''
idRemove
Runs when the remove command is entered and an ID is specified.
'''
def idRemove(id, updatedPpl):
   data = 0

   for person in updatedPpl:
      if person["id"] == id:
         data = person
         updatedPpl.remove(person)
         printNew = input(f"Data corresponding to ID number {BLUE}{id}{RESET} has been removed. Would you like to print updated data list? (Y/N)\n:")
         printNew = printNew.strip().lower()
         if printNew == "y":
            print(updatedPpl)
            break
         else:
            break
      else:
         continue
   if data == 0:
      print(f"No data found for ID number {BLUE}{id}{RESET}.")
   else:
      return updatedPpl

def dataAdd(inputList):
   newDataLine = {

   }
   for i in len(inputList):
      newDataLine.append(inputList[i])
   newDataLine = {
    "id":sLine[0],
    "first_name":sLine[1],
    "last_name":sLine[2],
    "email":sLine[3],
    "gender":sLine[4],
    "ip_address":sLine[5],
   }
   return newDataLine


